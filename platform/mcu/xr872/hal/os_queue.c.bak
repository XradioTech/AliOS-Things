#ifndef _KERNEL_OS_YUNOS_OS_QUEUE_H_
#define _KERNEL_OS_YUNOS_OS_QUEUE_H_

#include "kernel/os/YunOS/os_time.h"
#include "kernel/os/YunOS/os_common.h"

#ifdef __cplusplus
extern "C" {
#endif

#if 0
typedef struct {
    void *hdl;
} aos_hdl_t;

typedef aos_hdl_t aos_queue_t;
#endif

typedef void * QueueHandle_t;

typedef struct OS_Queue {
    QueueHandle_t   handle;
} OS_Queue_t;

typedef struct OS_Queue_XR {
	kbuf_queue_t queue;
	uint32_t item_size;
	void* msg_start;
} OS_Queue_XR_t;



//int aos_queue_new(aos_queue_t *queue, void *buf, unsigned int size, int max_msg);
static __inline OS_Status OS_QueueCreate(OS_Queue_t *queue, uint32_t queueLen, uint32_t itemSize)
{
	void *msg_start = NULL;
	OS_Queue_XR_t *queue_t = NULL;

	msg_start = malloc(queueLen * itemSize + queueLen*4); // RINGBUF_TYPE_DYN mode, user more ram for len
	if (msg_start == NULL) {
		return OS_E_NOMEM;
	}

	memset(msg_start, 0, (queueLen * itemSize + queueLen*4));
	queue_t = malloc(sizeof(OS_Queue_XR_t));
	if (queue_t == NULL) {
		free(msg_start);
		return OS_E_NOMEM;
	}

	memset(queue_t, 0, sizeof(OS_Queue_XR_t));

//	if (RHINO_SUCCESS == krhino_buf_queue_create(&queue_t->queue, "UNDEF", (void**)msg_start, queueLen * itemSize, itemSize)) {
	if (RHINO_SUCCESS == krhino_buf_queue_create(&queue_t->queue, "UNDEF", msg_start,
		(queueLen * itemSize + queueLen*4), itemSize)) { // RINGBUF_TYPE_DYN mode, user more ram for len
		queue_t->msg_start = msg_start;
		queue_t->item_size = itemSize;
		queue->handle = queue_t;
		return OS_OK;
	} else {
		free(queue_t);
		queue_t = NULL;
		free(msg_start);
		msg_start = NULL;
		queue->handle = NULL;
		return OS_FAIL;
	}
}


